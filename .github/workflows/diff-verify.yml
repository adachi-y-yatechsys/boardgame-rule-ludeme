# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: diff-verify (PoC)

on:
  workflow_dispatch:
  pull_request:
    branches:
      - feature/phase4-diff-verify-poc
    paths:
      - 'reports/ludeme/**'
      - 'docs/**'
      - '.github/workflows/diff-verify.yml'

jobs:
  diff-verify:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-diff.txt

      - name: Run diff verify CLI
        id: diff_verify
        continue-on-error: true
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          python -m tools.ludeme_diff.cli verify \
            --report reports/ludeme/diff_report.json \
            --matrix docs/mapping/matrix.csv \
            --glossary docs/glossary/ludeme_terms.csv \
            --output reports/ludeme/diff_verify_results.json \
            --slack-payload reports/ludeme/slack_payload.json \
            --archive-dir reports/ludeme/archive \
            --archive-label run-${{ github.run_number }} \
            --run-id ${{ github.run_id }} \
            --branch "$BRANCH_NAME" \
            --format json

      - name: Summarize diff archives
        if: always()
        run: |
          python -m tools.ludeme_diff.cli diff:archives list \
            --archive-dir reports/ludeme/archive \
            --latest \
            --count 5 \
            --output reports/ludeme/archive/latest_summary.json

      - name: Augment Slack payload with run metadata
        if: always()
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          slack_path = Path('reports/ludeme/slack_payload.json')
          if not slack_path.exists():
              raise SystemExit('Slack payload missing')

          payload = json.loads(slack_path.read_text(encoding='utf-8'))
          results_path = Path('reports/ludeme/diff_verify_results.json')
          archive_path = None
          latest_entry = None
          summary_path = Path('reports/ludeme/archive/latest_summary.json')
          if summary_path.exists():
              try:
                  summary_payload = json.loads(summary_path.read_text(encoding='utf-8'))
              except json.JSONDecodeError:
                  summary_payload = []
              if summary_payload:
                  latest_entry = summary_payload[0]

          if results_path.exists():
              results = json.loads(results_path.read_text(encoding='utf-8'))
              archive_path = results.get('archive', {}).get('path')
              archive_url = results.get('archive', {}).get('artifact_path')
          else:
              archive_url = None

          repo = os.environ['GITHUB_REPOSITORY']
          run_id = os.environ['GITHUB_RUN_ID']
          run_number = os.environ['GITHUB_RUN_NUMBER']
          run_url = f"https://github.com/{repo}/actions/runs/{run_id}"

          attachments = payload.setdefault('attachments', [])
          if attachments:
              fields = attachments[0].setdefault('fields', [])

              def upsert(title: str, value: str) -> None:
                  for field in fields:
                      if field.get('title', '').lower() == title.lower():
                          field['value'] = value
                          break
                  else:
                      fields.append({'title': title, 'value': value, 'short': False})

              upsert('Checks', run_url)
              upsert('Re-run', f"workflow_dispatch (run-{run_number})")
              if archive_path:
                  upsert('Archive', archive_path)
              if latest_entry:
                  latest_link = latest_entry.get('artifact_path') or archive_url or run_url
                  latest_run_id = latest_entry.get('run_id', 'n/a')
                  upsert('Latest Archive', f"{latest_run_id}: {latest_link}")
                  upsert('Inspect', f"python -m tools.ludeme_diff.cli diff:archives inspect {latest_run_id}")

          slack_path.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding='utf-8')
          PY

      - name: Upload diff verify results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diff-verify-results
          path: |
            reports/ludeme/diff_verify_results.json
            reports/ludeme/slack_payload.json
            reports/ludeme/archive/latest_summary.json
            reports/ludeme/archive

      - name: Publish GitHub Check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const payload = JSON.parse(fs.readFileSync('reports/ludeme/diff_verify_results.json', 'utf8'));
            const annotations = payload.checks_payload.annotations.slice(0, 50);
            const repo = process.env.GITHUB_REPOSITORY;
            const runId = process.env.GITHUB_RUN_ID;
            let summary = payload.summary;
            if (payload.archive && payload.archive.path) {
              summary += `\nArchive: ${payload.archive.path}`;
            }
            summary += `\nRun: https://github.com/${repo}/actions/runs/${runId}`;
            summary += `\nRe-run: Use workflow_dispatch or push updated commits.`;
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'diff:verify',
              head_sha: context.payload.pull_request ? context.payload.pull_request.head.sha : context.sha,
              status: 'completed',
              conclusion: payload.checks_payload.conclusion,
              output: {
                title: 'Ludeme diff verification',
                summary,
                annotations,
              },
            });

      - name: Determine Slack notification requirement
        id: slack
        if: always()
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          payload = json.loads(Path('reports/ludeme/diff_verify_results.json').read_text(encoding='utf-8'))
          should_notify = payload['status_counts'].get('failure', 0) > 0 or payload['status_counts'].get('warning', 0) > 0
          import os

          output_file = Path(os.environ['GITHUB_OUTPUT'])
          with output_file.open('a', encoding='utf-8') as fh:
              fh.write(f"notify={'true' if should_notify else 'false'}\n")
              archive_path = payload.get('archive', {}).get('path', '')
              fh.write(f"archive_path={archive_path}\n")
              run_url = f"https://github.com/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{os.environ['GITHUB_RUN_ID']}"
              fh.write(f"run_url={run_url}\n")
          PY

      - name: Notify Slack
        if: steps.slack.outputs.notify == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data @reports/ludeme/slack_payload.json "$SLACK_WEBHOOK_URL"

      - name: Fail workflow if CLI reported failures
        if: steps.diff_verify.outcome == 'failure'
        run: |
          archive_path="${{ steps.slack.outputs.archive_path }}"
          if [ -z "$archive_path" ]; then
            archive_path='reports/ludeme/archive'
          fi
          echo "diff:verify detected failures. See annotations, Slack notification, and archive at ${archive_path}." >&2
          echo "Re-run via workflow_dispatch or push new commits. Run URL: ${{ steps.slack.outputs.run_url }}" >&2
          exit 1
